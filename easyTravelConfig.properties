# easyTravel configuration file
#
# This file allows to set some properties for the easyTravel demo application.
#
#

# General options
################################################################################
# general java options that are set for all Java applications,
# Note: use comma to specify multiple arguments. Comma as part of an option can be set by using double-comma ",,"
#       use double-backslashes for windows path-names, i.e. C:\\Program Files\\....\\dtagent.dll
config.javaopts=-Djava.net.preferIPv4Stack=true

# How to connect to the APM Server
#################################################################################
config.apmServerProtocol=https
config.apmServerHost=live.dynatrace.com
config.apmServerWebPort=443
config.apmServerPort=443
config.apmServerUsername=${config.dtServerUsername}
config.apmServerPassword=${config.dtServerPassword}
config.apmServerWebURL=https://live.dynatrace.com:443
config.apmTenant=yhx59590
config.apmTenantToken=

# Which type of APM mode is chosen if we cannot determine the type automatically (i.e. if the APM server is down during startup)
# If at least one set of server properties above are correct, apmServerDefault is ignored and mode is chosen automatically.
# If settings for both servers are correct, APM mode is chosen in first place.
# possible values are: Classic (=AppMon), APM (=Dynatrace)
#config.apmServerDefault=APM
config.apmServerDefault=APM

# JLT-48536
# The cluster node name for load balancing of Customer Frontend
# Must be aligned to <BalanceMember> settings in Apache httpd.conf
# May be left empty, in that case it won't be part of the jvmRoute
# If not empty, session id will be something like
# 8E4675DA4C317AAE65658EF44355CF56.jvmRoute-NODE1-8280
config.clusterNode=

# here you can specify an agent-library for all started Java, C++, Ant, Webserver and PHP processes. Any agent settings
# for frontendAgent, backendAgent, creditCardAuthorizationAgent, antAgent below which is at "auto" will use this agent.
# Note: this is a Java-style property, you need to use double-backslashes, i.e. C:\\Program Files\\....\\dtagent.dll
# Note: this does not affect the .NET Agents. For .NET the environment variables COR_PROFILER will choose which installed agent to use
# Note: for Apache Web Server Agent, you still need to adjust items below accordingly
# When set to auto, easyTravel will search well known directory locations and use the most recent version of the agent that is found.
# NOTE: for RUXit we do not look for installed Agents as we expect auto-detection and auto-instrumentation of RUXit Agent to take care of this!
config.agent=auto

# Note: this is a Java-style property, you need to use double-backslashes, i.e. C:\\Program Files\\....\\dtagent.dll
config.frontendAgent=auto
# Note: #{port} is a dynamic property
config.frontendSystemProfile=CustomerFrontend_easyTravel#{_port}
config.frontendAgentOptions=wait=5
# Note: use comma to specify multiple arguments. Comma as part of an option can be set by using double-comma ",,"
#       use double-backslashes for windows path-names, i.e. C:\\Program Files\\....\\dtagent.dll
config.frontendJavaopts=-Xmx160m

# Note: this is a Java-style property, you need to use double-backslashes, i.e. C:\\Program Files\\....\\dtagent.dll
config.angularFrontendAgent=auto
# Note: #{port} is a dynamic property
config.angularFrontendSystemProfile=AngularFrontendService_easyTravel#{_port}
config.angularFrontendAgentOptions=wait=5
config.angularFrontendJavaopts=-Xmx160m

# Note: this is a Java-style property, you need to use double-backslashes, i.e. C:\\Program Files\\....\\dtagent.dll
config.backendAgent=auto
config.backendSystemProfile=BusinessBackend_easyTravel
config.backendAgentOptions=wait=5
# Note: use comma to specify multiple arguments. Comma as part of an option can be set by using double-comma ",,"
#       use double-backslashes for windows path-names, i.e. C:\\Program Files\\....\\dtagent.dll
config.backendJavaopts=-Xmx160m,-DentityExpansionLimit=500000

# Specifies the additional CPU time, in millisecond, which is used whenever a search for a journeys is performed.
# Note: the number of CPU cycles required to achieve a given delay, is calibrated at the beginning of execution, and from then
# on the resulting coefficient value is used. In this way we take into account other processes' CPU consumption and the
# speed of the machine. Subsequently, if other processes begin to use up even more CPU, requests in business backend will get
# progressively slower.
# The following REST interfaces can be used to query and adjust this value at runtime:
# http://localhost:8091/services/ConfigurationService/getBackendCPUCycleTime
# http://localhost:8091/services/ConfigurationService/setBackendCPUCycleTime?timeMS=100
config.backendCPUCycleTime=0

# Specifies the additional CPU time, in millisecond, which is used whenever JourneyServices calls the ValidateName plugin.
# The coefficient used to calculate the required CPU cycles for this delay is the same as that used for the backendCPUCycleTime
# - see appropriate comment for more explanation.
config.cpuLoadJourneyServiceWaitTime=100

# CPU calibration coefficient for CPUHelper.busyWait:
# If this configuration value is provided and is not 0, CPU calibration will happen, but the coefficient used will be disregarded
# and the value specified in the configuration will be used instead.
# Value 0 means that the coefficient is calculated dynamically.
config.CPUCalibration=0.0

# e.g. use the value 'Standard' to automatically start the default scenario, specify Group if there are multiple
# scenarios with the same name in different groups, e.g. "Standard" or "Performance Regression"
config.autostart=
config.autostartGroup=

# Java Customer Frontend Web Application
#################################################################################
# the ranges allow to start multiple frontend instances
# which will automatically use ports in the provided range
# the RangeEnd is also included, i.e. inclusive range.
#
# if you want only one port, configure start and end equal
config.frontendPortRangeStart=8080
config.frontendPortRangeEnd=8090
config.frontendShutdownPortRangeStart=8180
config.frontendShutdownPortRangeEnd=8190
config.frontendAjpPortRangeStart=8280
config.frontendAjpPortRangeEnd=8290

config.angularFrontendPortRangeStart=9080
config.angularFrontendPortRangeEnd=9090
config.angularFrontendShutdownPortRangeStart=9180
config.angularFrontendShutdownPortRangeEnd=9190
config.angularFrontendAjpPortRangeStart=9280
config.angularFrontendAjpPortRangeEnd=9290
config.angularFrontendApachePort=9079

config.backendMultiEnabled=false
config.backendPortRangeStart=28080
config.backendPortRangeEnd=28090
config.backendShutdownPortRangeStart=28180
config.backendShutdownPortRangeEnd=28190
config.backendAjpPortRangeStart=28280
config.backendAjpPortRangeEnd=28290

config.apacheWebServerBackendPort=8091

### Context Root settings
# Context root of CustomerFrontend webapp
config.frontendContextRoot=/
# Context root of AngularFrontend webapp
config.angularFrontendContextRoot=/
# Context root of BusinessBackend webapp.
# Note: You also need to adjust webServiceBaseDir below if you change this!!
config.backendContextRoot=/
# Note: You also need to adjust webServiceBaseDir below if you change this!!
config.thirdpartyContextRoot=/

# Session expiry settings
# These settings avoid OOM when too many sessions are opened in a short period of time.
# The default session timeout of 30 minutes (1,800,000 ms) still applies, but you should
# set a lower timeout if you are facing memory problems.
config.minSessionLifetimeInMillis=1800000

# Java Business Backend Application
#################################################################################
# Note: also adjust the webServiceBaseDir if you change the port!
config.backendPort=8091
config.backendHost=localhost
config.backendShutdownPort=8191

config.webappBase=webapp
config.webServiceBaseDir=http://${config.backendHost}:${config.backendPort}/services/

# Third Party Content server
#################################################################################
config.thirdpartyPort=8092
config.thirdpartyHost=localhost
config.thirdpartyUrl=http://${config.thirdpartyHost}:${config.thirdpartyPort}/
#config.thirdpartyHost=127.0.0.4
#config.thirdpartyUrl=http://cdn.static-easytravel.com:${config.thirdpartyPort}/

config.thirdpartyShutdownPort=8192
config.thirdpartyWebappBase=webapp

# Note: use comma to specify multiple arguments. Comma as part of an option can be set by using double-comma ",,"
#       use double-backslashes for windows path-names, i.e. C:\\Program Files\\....\\dtagent.dll
config.thirdpartyJavaopts=-Xmx32m

# -------------------------------------------------------------------------------
# Problem Pattern: UnhealthyThirdPartyService
# -------------------------------------------------------------------------------
config.thirdpartyCaching=true

config.thirdpartyCdnHost=localhost
config.thirdpartyCdnUrl=http://${config.thirdpartyCdnHost}:${config.thirdpartyPort}/
#config.thirdpartyCdnHost=127.0.0.4
#config.thirdpartyCdnUrl=http://cdn2.static-easytravel.com:${config.thirdpartyPort}/

config.thirdpartySocialMediaHost=localhost
config.thirdpartySocialMediaUrl=http://${config.thirdpartySocialMediaHost}:${config.thirdpartyPort}/
#config.thirdpartySocialMediaHost=127.0.0.4
#config.thirdpartySocialMediaUrl=http://socialmedia.static-easytravel.com:${config.thirdpartyPort}/
# -------------------------------------------------------------------------------


# Java Web Launcher Application
#################################################################################
# Context root of WebLauncher (note: it's under main/ anyway)
config.weblauncherContextRoot=/

config.weblauncherPort=8094
config.weblauncherShutdownPort=8095


# Native C++ Credit Card Authorization Application
#################################################################################
config.creditCardAuthorizationAgent=auto
config.creditCardAuthorizationSystemProfile=CreditCardAuthorization_easyTravel
config.creditCardAuthorizationAgentOptions=
# Note: use comma to specify multiple arguments. Comma as part of an option can be set by using double-comma ",,"
#       use double-backslashes for windows path-names, i.e. C:\\Program Files\\....\\dtagent.dll
config.creditCardAuthorizationEnvArgs=DT_WAIT=5,RUXIT_WAIT=5
config.creditCardAuthorizationHost=localhost

# dotNET Payment Backend Application
#################################################################################
config.paymentBackendServer=dotNET/cassini20/UltiDevCassinWebServer2
config.paymentBackendServerIIS=/system32/inetsrv/w3wp
config.paymentBackendDir=dotNET/dotNetPaymentBackend
config.paymentBackendSystemProfile=dotNetBackend_easyTravel
config.paymentBackendPageToIdentify=WebService/PaymentService.asmx
config.paymentBackendAgentOptions=
# here you can switch to 3.5.1 Agents if you have both versions installed
# 4: config.paymentBackendEnvArgs=DT_WAIT=5,RUXIT_WAIT=5,COR_ENABLE_PROFILING=0x1,COR_PROFILER={E1F00E4B-4010-4a1c-8E9B-6DFA7E802D15}
# 4.1: config.paymentBackendEnvArgs=DT_WAIT=5,RUXIT_WAIT=5,COR_ENABLE_PROFILING=0x1,COR_PROFILER={DA7CFC47-3E35-4c4e-B495-534F93B28683}
# see https://dev-wiki.dynatrace.org/display/DEV/.NET+GUIDs for a list of GUIDs
config.paymentBackendEnvArgs=DT_WAIT=5,RUXIT_WAIT=5,COR_ENABLE_PROFILING=0x1
config.paymentBackendHost=localhost
config.paymentBackendPort=9010

# dotNET B2B Frontend Application
#################################################################################
config.b2bFrontendServer=dotNET/cassini20/UltiDevCassinWebServer2
config.b2bFrontendServerIIS=/system32/inetsrv/w3wp
config.b2bFrontendDir=dotNET/dotNetB2BFrontend
config.b2bFrontendSystemProfile=dotNetFrontend_easyTravel
config.b2bFrontendPageToIdentify=Account/LogOn.aspx
config.b2bFrontendAgentOptions=
# here you can switch to 3.5.1 Agents if you have both versions installed
# 4: config.b2bFrontendEnvArgs=DT_WAIT=5,RUXIT_WAIT=5,COR_ENABLE_PROFILING=0x1,COR_PROFILER={E1F00E4B-4010-4a1c-8E9B-6DFA7E802D15}
# 4.1: config.b2bFrontendEnvArgs=DT_WAIT=5,RUXIT_WAIT=5,COR_ENABLE_PROFILING=0x1,COR_PROFILER={DA7CFC47-3E35-4c4e-B495-534F93B28683}
# see https://dev-wiki.dynatrace.org/display/DEV/.NET+GUIDs for a list of GUIDs
config.b2bFrontendEnvArgs=DT_WAIT=5,RUXIT_WAIT=5,COR_ENABLE_PROFILING=0x1
config.b2bFrontendPortRangeStart=9000
config.b2bFrontendPortRangeEnd=9009

# Ant based Procedures
#################################################################################
config.antAgent=auto
config.antSystemProfilePrefix=Ant_easyTravel
config.antAgentOptions=wait=5
config.antForkHttpService=1698

# if config.antJavaopts is set than forked ant procedures will use it instead of config.javaopts
# Note: use comma to specify multiple arguments. Comma as part of an option can be set by using double-comma ",,"
#       use double-backslashes for windows path-names, i.e. C:\\Program Files\\....\\dtagent.dll
config.antJavaopts=-Xmx256m,-Xms64m
# if config.skipSessionRecording is set to true, procedures for demonstrating test automation
# features (unit, performance, ui-driven, webapi tests) won't be starting/stopping session recording
# via REST API.
config.skipSessionRecording=false
# Starting and accessing the SQL Database from Java
#################################################################################
# for starting the internal Derby database in the Launcher, set to "false" if you connect
# to a different RDBMS
config.internalDatabaseEnabled=true
config.internalDatabasePort=1527
config.internalDatabaseHost=localhost

# how to connect to the Java database
config.databaseDriver=org.apache.derby.jdbc.ClientDriver
config.databaseUrl=jdbc:derby://${config.internalDatabaseHost}:${config.internalDatabasePort}/easyTravelBusiness;create=true
config.databaseUser=APP
config.databasePassword=APP

# how to connect to Mysql database
config.mysqlDriver=com.mysql.jdbc.Driver
config.mysqlPort=3306
config.mysqlHost=${config.internalDatabaseHost}
config.mysqlUrl=jdbc:mysql://${config.mysqlHost}:${config.mysqlPort}/test
config.mysqlUser=root
config.mysqlPassword=labpass
config.mysqlServer=mysql-5.1/bin/mysqld
# if my.ini does not exist it will be generated anyway
config.mysqlGeneratedMyIniConfig=true

# Settings for the .NET Payment application
#################################################################################

# for connection to dotNet Services
config.dotNetBackendWebServiceBaseDir=http://${config.paymentBackendHost}:${config.paymentBackendPort}/


# Tweak settings
#################################################################################

# the strategy for Axis service stubs
config.serviceStubStrategy=globalPool

# Caches the journey in-memory byte[] objects
# as a workaround for a memory leak in ICEfaces DynamicResourceDispatcher.
# true: byte[] arrays are cached - ICEfaces memory leak should not occur (not that one)
# false: always create new byte[] arrays (within Axis) - will trigger OOM.
config.cacheJourneyPictures=true

# Settings for plugins
#################################################################################

# Boot plugins - enabled at system start
config.bootPlugins=NamedPipeNativeApplication,NamedPipeNativeApplication.NET,DummyPaymentService,DatabaseCleanup,UseFinanceServiceWCF.NET

# Settings for an optional MemoryCache Plugin
config.memoryCacheEager=false
config.memoryCacheSingleton=true

# Launcher HTTP Service port
config.launcherHttpPort=1697

remotingHost=localhost
remotingPort=9020

# Settings for Mainframe Demos
#################################################################################
config.enableMainframeDemo=false
# config.wsmqClasspath has to point to a directory containing the WebSphere MQ Client libraries.
config.wsmqClasspath=C:\\Program Files\\IBM\\WebSphere MQ\\java\\lib
config.wsmqJms=false
config.wsmqSetJmsCompliantTargetClient=true
config.wsmqHostName=localhost
config.wsmqPort=1414
config.wsmqChannel=SYSTEM.DEF.SVRCONN
config.wsmqQueueManagerName=MB7QMGR
config.wsmqUserId=user
config.wsmqPassword=password
config.wsmqPutQueueName=creditcardauthrequest
config.wsmqGetQueueName=creditcardauthresponse
config.ctgHostName=localhost
config.ctgPort=2006
config.ctgServer=SERV
config.ctgProgram=PROG
config.ctgTransaction=TRAN
config.ctgUserId=user
config.ctgPassword=password
config.imsClasspath=/path/to/ims/jars
config.imsDataStoreName=DATASTOR
config.imsHostName=localhost
config.imsPort=8888
config.imsTranCode=TRANCODE

# Configuration for using FQDN for generated traffic
# (flag relevant for ruxit only, for classic FQDN is always disabled anyway)

config.disableFQDN=false
#################################################################################

# Configuration of the Apache HTTP server
#################################################################################

config.apacheWebServerHost=localhost
config.apacheWebServerPort=8079
config.apacheWebServerB2bHost=localhost
config.apacheWebServerB2bPort=8999
# specify the full-path to the agent module here, e.g. C:\\Program Files\\...\\agent\\lib\\dtagent.dll
config.apacheWebServerAgent=auto
config.apacheWebServerEnvArgs=

# for the iOS deployment link and plist file: override host settings here.
# if empty, it will try to resolve host and port automatically,
# if it doesn't work (e.g. resolves to "localhost" or "127.0.0.1"),
# you can override auto detection with these properties.
# Note: set Port to 0, to deactivate SSL; These properties are now replacement for appleMobileHost and appleMobilePort
config.apacheWebServerSslHost=
config.apacheWebServerSslPort=9443
config.disableApacheCertificateGeneration=false

# Determines if to generate and then use httpd.conf in user home area
# .dynaTrace/easyTravel X.X.X/easyTravel/config/
config.apacheWebServerUsesGeneratedHttpdConfig=true

# Specifies a custom file name and location for the Apache configuration file.
# This file will then be copied to user home area under the name httpd.conf
# This property is has meaning only if config.apacheWebServerUsesGeneratedHttpdConfig=false
# If not defined, or if it contains an illegal path or points to a non-existent file,
# attempt to use httpd.conf from the user home area, if found.
# As the last resort, generate a fresh httpd.conf in the user home area.
config.apacheWebServerHttpdConfig=

config.apacheWebServerSimulatesFirewall=false

config.apacheWebServerEnableVirtualIp=false
config.apacheWebServerVirtualIp=127.0.0.2
config.apacheWebServerB2bVirtualIp=127.0.0.3

config.apacheWebServerStatusPort=8077

# Use the following configuration when easytravel.com is configured, see https://dev-wiki.dynatrace.org/display/DEV/Configuration+of+the+Apache+web+server+bundled+with+EasyTravel
#config.apacheWebServerHost=www.easytravel.com
#config.apacheWebServerPort=80
#config.apacheWebServerEnableVirtualIp=true
#config.apacheWebServerVirtualIp=127.0.0.2
#config.apacheWebServerB2bHost=admin.easytravel.com
#config.apacheWebServerB2bPort=80
#config.apacheWebServerB2bVirtualIp=127.0.0.3

# Slowdown for Apache Webserver in seconds - default value 1s
config.apacheWebServerWaitTime=1

# Configuration of the NGiNX HTTP server
#################################################################################
config.nginxWebServerHost=localhost
config.nginxWebServerPort=8079

config.nginxWebServerB2bHost=localhost
config.nginxWebServerB2bPort=8999

config.nginxWebServerAgent=auto
config.nginxWebServerEnvArgs=

# Determines if to generate and then use nginx configuration file in user home area.
# .dynaTrace/easyTravel X.X.X/easyTravel/config/
config.nginxWebServerUsesGeneratedHttpdConfig=true

# Configuration of Apache Cassandra
#################################################################################
# Note: this is a Java-style property, you need to use double-backslashes, i.e. C:\\Program Files\\....\\dtagent.dll
config.cassandraAgent=auto
config.cassandraSystemProfile=Cassandra_easyTravel_Node
config.cassandraAgentOptions=wait=5
# Note: use comma to specify multiple arguments. Comma as part of an option can be set by using double-comma ",,"
#       use double-backslashes for windows path-names, i.e. C:\\Program Files\\....\\dtagent.dll
config.cassandraJavaopts=-Xmx256m,-Djava.library.path=sigar-bin
# defines the easyTravel cluster Cassandra nodes, the first enlisted node is used as seed
config.cassandraNodeAddresses=127.0.0.1,127.0.0.2,127.0.0.3
# defines the read/write consistency level of the Cassandra nodes; available are: any (only write), one, two, three, quorum, all
config.cassandraReadConsistencyLevel=one
config.cassandraWriteConsistencyLevel=quorum
# only takes effect if there is no existing Cassandra data
config.cassandraReplicationFactor=1

# MongoDB config
config.mongoDbInstances=localhost:27017

# Configuration of PHP
#################################################################################
# specify the full-path to the agent module here, e.g. /opt/dynaTrace/agent/lib/dtagent.so, if left at "auto" it will use the setting from config.agent
config.phpAgent=auto
# if httpd.conf and PHP.ini do not exist it will be generated anyway
config.apacheWebServerUsesGeneratedPhpIni=true

# Configuration of BaseLoad
#################################################################################
# How much load is started (0..100) after startup, set to 0 to have zero load, 100 to have full
config.baseLoadDefault=20

# ratio settings allow to define how much load is triggered on Java/.NET Frontends compared to each other
# multiply the current load setting (0..100) with this ratio to get requests/min for this app
config.baseLoadB2BRatio=0.1
config.baseLoadCustomerRatio=0.25
config.baseLoadMobileNativeRatio=0.1
config.baseLoadMobileBrowserRatio=0.25
config.baseLoadHotDealServiceRatio=0.25
config.baseLoadIotDevicesRatio=0.1
config.baseLoadHeadlessAngularRatio=0.0
config.baseLoadHeadlessMobileAngularRatio=0.0

# if config.baseLoadHeadlessRatio is > 0 then browser visits will be performed through Chrome's headless browser API
# set showHeadlessBrowser=true in order to see the browser as easyTravel automates it. This is for debugging ONLY.
config.showHeadlessBrowser=false

# Maximum number of chrome drivers that can be created at any one instance during headless visits
config.maximumChromeDrivers=10
config.maximumChromeDriversMobile=10

# the number of visits created against a single chrome driver before it is re-used
config.reUseChromeDriverFrequency=4

# under ubuntu the proxy used with the chrome driver fails to start if throttling is being used.
# this switch allows Throttling (bandwith) to be disabled if other OSes have a similar problem
config.headlessThrottlingEnabled=false

# the percentage number of visits done in angular that should fail when selecting value in dropdown 
# Errors happen only if JsErrorWhenSelectingTravelers plugin is enabled
config.headlessAngularJsErrorRate=80

# the percentage number of visits done in angular that should fail to click the pay button 
# Errors happen only if UsabilityIssues plugin is enabled
config.headlessAngularUsabilityClickPayFailRate=90

# Number of seconds between actions when simulating overload
#
config.overloadActionPause=1

# number of user actions executed in the script which generates overload
#
config.overloadActionsPerVisit=25

# Scenario to be used when generating headless traffic
#
# StandardHeadlessTraffic - uses a scenario to generate a standard set of headless visits
# OverloadDetectionHeadlessTraffic - uses a scenario to generate one visit that simulates overload
#
config.headlessLoadScenario=StandardHeadlessTraffic

# Configuration of the "Increasing Load". Be aware that the number are absolute numbers. That is, the ratio configuration (e.g., baseLoadB2BRatio) will be ignored.
# Attention: Too high values cause high response times and, in worst case, crashes of the requested services.
config.customerFrontendStartLoad=10
config.customerFrontendIncreasePerMinute=5
config.customerFrontendMaximumLoad=30

config.b2bFrontendStartLoad=0
config.b2bFrontendIncreasePerMinute=5
config.b2bFrontendMaximumLoad=20

config.mobileNativeStartLoad=0
config.mobileNativeIncreasePerMinute=5
config.mobileNativeMaximumLoad=20

config.mobileBrowserStartLoad=10
config.mobileBrowserIncreasePerMinute=5
config.mobileBrowserMaximumLoad=30

# Custom scenario for customer traffic. Available values:
# EasyTravel - default setting. Random visit types.
# EasyTravelFixed - all visit parameters are static. All visits are converted.
# EasyTravelPredictable - fixed distribution of visit types. See below for details.
config.customerLoadScenario=EasyTravel

#Additional configuration for easyTravelPredictable scenario. Ratios definition for each type of visit
#config.predictableCustomerLoadBounce=0.1
#config.predictableCustomerLoadSearch=0.2
#config.predictableCustomerLoadAlmostConvert=0.1
#config.predictableCustomerLoadConvert=0.6

# Configuration of Launcher Timeouts
#################################################################################
# The max amount of time we let the process execute before stopping it.
config.syncProcessTimeoutMs=30000

# Memcached.Net Plugin
#################################################################################
config.memcachedServerHost=localhost
config.memcachedServerPort=11211

# DCRum Emulation
#################################################################################
# defines how many DCRum data records are kept in memory until a polling happens
config.dcRumMaxDataRecords=2500
# enables X-dynaTrace header from the start of the launcher (esp. needed for integration testing)
config.xDynaTraceHeaders=false
# the AMD version that our emulated RtmDataServlet reports
config.amdVersion=12.1.0.0

# Configuration of injection via apache web server
#################################################################################
config.apacheWebServerProxyPort=8070
config.browserPath=

#Proxy settings
#if <proxyHost>:<port> is not reachable the settings will be ignored
config.proxyHost=
config.proxyPort=0
config.proxiedSites=google,twitter,dynatrace,facebook,adobe

# pluginService is only enabled if pluginServiceHost is set...
config.pluginServicePort=7654
config.pluginServiceShutdownPort=7655
config.pluginServiceContextRoot=/PluginService
#config.pluginServiceHost=localhost

# using this property you can disable the Servlet 3.0 based recommendation bean
config.enableRecommendationBean=true

# configure a custom service that implements the VerificationService interface
# if you leave it empty the config.webServiceBaseDir is used
config.thirdPartyWebserviceUri=


# Configuration of VMotion. Config properties needs to bo overridden in scenarios.xml file
# example:
#   <setting name="config.vCenterHost" type="scenario_config" value="emea-gdn-vc001"/>
#################################################################################
config.vCenterHost=
config.vCenterUser=
config.vCenterPassword=
config.fromHost=
config.toHost=
config.resPool=
config.vmName=

# DBSpammingAuth parameters
#################################################################################
# Additional delay added to authenticate method in AuthenticationService service. Used if DBSpammingAuth problem pattern is enabled.
# Value in milliseconds. You can set 0 to disable any delay.
# Note: The following REST interfaces can be used to query and adjust this value at runtime!
# http://localhost:8091/services/ConfigurationService/getDBSpammingAuthDelay
# http://localhost:8091/services/ConfigurationService/setDBSpammingAuthDelay?delay=1
config.authServiceGetUserDelay=20
# Define how big database spamming should be when DBSpammingAuth problem pattern is enabled. This is the number of additional database queries performed.
# Note: The following REST interfaces can be used to query and adjust this value at runtime!
# http://localhost:8091/services/ConfigurationService/getDBSpammingAuthSize
# http://localhost:8091/services/ConfigurationService/setDBSpammingAuthSize?spamSize=32
config.authServiceSpamSize=32
# Enable/disable spamming in all AuthenticationService methods.
# Note: The following REST interfaces can be used to query and adjust this value at runtime!
# http://localhost:8091/services/ConfigurationService/isFullAuthServiceSpammingEnabled
# http://localhost:8091/services/ConfigurationService/setFullAuthServiceSpamming?full=true
config.isFullAuthServiceSpammingEnabled=true


#easyTravelMonitor application parameters
#################################################################################
config.backendEasyTravelMonitorContextRoot=/easyTravelMonitor
config.backendEasyTravelMonitorWar=easyTravelMonitor.war

#PluginScheduler configuration
config.pluginSchedulerEnabled=false

#Enable WebLauncher Authentication and SSL encryption
config.isWebLauncherAuthEnabled=false
config.sslPort=8443

# node.js server prameters
#################################################################################
#when port is empty then node.js content will be not loaded
config.nodejsHost=localhost
config.nodejsPort=8100
config.nodejsURL=http://${config.nodejsHost}:${config.nodejsPort}/

# wordpress blog url
#################################################################################
config.wordpressBlogUrl=http://${config.apacheWebServerHost}:${config.apacheWebServerPort}/blog/

# ThirdParty Resources. UemLoad will not download resources from these domains/urls
#################################################################################
config.thirdPartyDomains=facebook.com,twitter.com,google.com,facebook.net,statcounter.com,googleapis.com,pinterest.com,linkedin.com,openweathermap.org,cdnjs.cloudflare.com,cdn.ampproject.org,c.amazon-adsystem.com
config.thirdPartyUrls=//assets.dynatrace.com/global/icons/favicon.ico

# Synthetic Tests(ruxit only). UemLoad will use this information to generate synthetic data
#################################################################################
config.syntheticTestDefinitionId=
config.syntheticTestVuControllerIds=2,4,5,6

# DatabaseSlowdown parameters
#################################################################################
# Additional delay added to two queries in two service methods:
# 	JourneyJpaProvider: findJourneys
# 	JourneyJpaProvider: getMatchingJourneyDestinations
# Used only if DatabaseSlowdown problem pattern is enabled.
# Value in milliseconds, 0 means no delay.
# Note:
# * The delay will only function for Derby and Oracle.  For other databases
#   turning the plugin on has no effect.
# * The delay as stated is applied to the findJourneys method, while
#   getMatchingJourneyDestinations uses the delay divided by 10
#   because it tends to return a large number of rows (see below).
# * In addition, for Derby the delay will be executed for every row
#   of the dataset that the query successfully retrieves.  This means multiple executions
#   of the delay function per query, and hence different delay values might be required
#   depending on the database being used.
# REST interface:
# The following REST interfaces can be used to query and adjust this value at runtime.
# 	http:<service IP>:8091/services/ConfigurationService/getDatabaseSlowDownDelay
# 	http:<service IP>:8091/services/ConfigurationService/setDatabaseSlowDownDelay?delay=<delay>
# E.g. setting of the delay to 250 ms:
# 	http://172.18.150.5:8091/services/ConfigurationService/getDatabaseSlowDownDelay
# 	http://172.18.150.5:8091/services/ConfigurationService/setDatabaseSlowDownDelay?delay=250
# To enable DB Slowdown set enableDBSlowdown property to true
config.databaseSlowdownDelay=250
config.enableDBSlowdown=false

# CPULoad parameters
#################################################################################
# Configuration parameters to start CPULoad with.
# By default we do no supply any values, thus causing the load to run
# at constant level of 100%, until killed or terminated through a message on the port.
#
# The total time the program should run, in milliseconds. Values: -1, 0 or positive; -1 means infinity.
#config.NativeCPULoadTotalTime=1800000
config.NativeCPULoadTotalTime=-1

# Lengths of active CPU load periods, in milliseconds. Values: -1, 0 or positive; -1 means infinity.
#config.NativeCPULoadActiveTime=4000
config.NativeCPULoadActiveTime=-1

# Lengths of quiet CPU load periods, in milliseconds. Values: 0 or positive.
#config.NativeCPULoadQuietTime=1000
config.NativeCPULoadQuietTime=0

# Priority level to run CPULoad at
# 0 - normal
# 1 - above normal
#config.NativeCPULoadPri=1
config.NativeCPULoadPri=0

# Default password for executing Linux commands
config.sudoPassword=labpass

# NetworkPacketDrop problem pattern
# Iptables rule to generate packet drops on main Apache Web Server
# NOTE:
# * pattern can be applied only on Linux hosts
# * to apply more than one iptables rule use comma for separation
# * do not include iptables comment section, comment is automatically added after pattern execution
# * all rules entered for problem pattern are commented as "NetworPacketDrop"
config.iptablesRules=iptables -A INPUT -p tcp --source-port ${config.frontendAjpPortRangeStart} -j DROP -m statistic --mode random --probability 0.25

# CouchDB configuration
#################################################################################
# host address
config.couchDBHost=127.0.0.1
# host port
config.couchDBPort=5984
# host deactivation port: reading from this port will shut down the Erlang VM running CouchDB
config.couchDBShutdownPort=5989
# database name:
# Only lowercase characters (a-z), digits (0-9), and any of the characters _, $, (, ), +, -, and / are allowed. Must begin with a letter.
config.couchDBName=easy_travel_images

# AngularJS demo app configuraiton
#################################################################################
# full URL to the angularApplication for example: http://localhost/image_gallery/
config.imageGalleryFrontendURL=
config.imageGalleryAppBasePath=/yii_backend
config.imageGalleryImageRestPath=/index.php/api/imageRest
config.imageGalleryImageThumbnailsPath=/uploads/images/thumbnails
config.imageGalleryRestUsername=labuser
config.imageGalleryRestPassword=labpass

# Magento demo shop url
#################################################################################
config.magentoShopUrl=

# Async Context Timeout
# used in: CalculateRecommendations.java , CreateSpecialOffers.java , AdsForBlog.java
#################################################################################
config.asyncContextTimeout=10000

# Mesos + Marathon parameters
#################################################################################
config.marathonHost=localhost
config.marathonPort=443
config.marathonUser=
config.marathonPassword=
config.marathonURI=https://${config.marathonHost}:${config.marathonPort}/
config.marathonMicroservices=
config.marathonScaledNumberOfMicroservices=3
config.marathonDefaultNumberOfMicroservices=2

# MongoDB Authentication parameters
#################################################################################
config.mongoDbUser=labuser
config.mongoDbPassword=labpass
config.mongoDbAuthDatabase=admin

# load value for LoadChange plugin. This is absolute load value. Actual volume for different load generators will depend on following properties:
#config.baseLoadB2BRatio
#config.baseLoadCustomerRatio
#config.baseLoadMobileNativeRatio
#config.baseLoadMobileBrowserRatio
#################################################################################
config.baseLoadIncreased=90

# plugin agent server parameters
#################################################################################
config.pluginAgentURLCF=
config.pluginAgentURLBB=
config.pluginAgentContext=/load/gateway

# Vagrant configuration
#################################################################################
config.vagrantBinaryLocation=vagrant
config.vagrantBoxProtocol=http
config.vagrantWorkingDir=

# Configuration of Robots and Synthetic Browsers
#################################################################################
# What percentage (0..100) of Web traffic is covered by each browser type
# (Dynatrace Synthetic, Synthetic(Gomez, Keynote), Robots(Googlebot, BaiduSpider, Bingbot etc.))
# In Classic mode Dynatrace Synthetic property is ignored and always equal to 0%.
config.baseDynatraceSyntheticLoad=3.0
config.baseSyntheticLoad=3.0
config.baseRobotLoad=3.0

# AMP configuration
#################################################################################
# Feature only available in APM mode for Dynatrace.
# Application ID and other needed configs can be obtained by:
# 1. Creating new AMP application in Dynatrace (Deploy Dynatrace -> Set up agentless or AMP monitoring -> Add web application that relies on AMP)
# 2. Go to: Applications -> <Your new AMP application> -> Edit -> Setup. JavaScript tag contains all of the information needed for proper configuration.
# Note: For Dynatrace Managed, assign value of variable "tenantpath" to config.ampBfTenant.
config.ampApplicationID=
config.ampBfProtocol=https
config.ampBfEnvironment=
config.ampBfPort=443
config.ampBfTenant=

#Allow to disable certificate validation in OpenKit
config.openKitTrustAllCertificates=false

# IoT Configuration
config.iotBeaconUrl=
config.iotRentalCarsAppId=

# Openkit Mobile App Configuration
config.mobileBeaconUrl=
config.etMobileAppId=
config.openKitMobileLoadGenerator=false
